/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_16_5 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adderUnit_out;
  wire [1-1:0] M_adderUnit_z;
  wire [1-1:0] M_adderUnit_v;
  wire [1-1:0] M_adderUnit_n;
  reg [1-1:0] M_adderUnit_subtract;
  reg [16-1:0] M_adderUnit_a;
  reg [16-1:0] M_adderUnit_b;
  alu_adder_10 adderUnit (
    .subtract(M_adderUnit_subtract),
    .a(M_adderUnit_a),
    .b(M_adderUnit_b),
    .out(M_adderUnit_out),
    .z(M_adderUnit_z),
    .v(M_adderUnit_v),
    .n(M_adderUnit_n)
  );
  
  wire [16-1:0] M_booleanUnit_out;
  reg [16-1:0] M_booleanUnit_a;
  reg [16-1:0] M_booleanUnit_b;
  reg [4-1:0] M_booleanUnit_alufn;
  alu_boolean_11 booleanUnit (
    .a(M_booleanUnit_a),
    .b(M_booleanUnit_b),
    .alufn(M_booleanUnit_alufn),
    .out(M_booleanUnit_out)
  );
  
  wire [16-1:0] M_shifterUnit_out;
  reg [16-1:0] M_shifterUnit_a;
  reg [4-1:0] M_shifterUnit_b;
  reg [4-1:0] M_shifterUnit_alufn;
  alu_shifter_12 shifterUnit (
    .a(M_shifterUnit_a),
    .b(M_shifterUnit_b),
    .alufn(M_shifterUnit_alufn),
    .out(M_shifterUnit_out)
  );
  
  wire [16-1:0] M_compareUnit_out;
  reg [1-1:0] M_compareUnit_z;
  reg [1-1:0] M_compareUnit_v;
  reg [1-1:0] M_compareUnit_n;
  reg [4-1:0] M_compareUnit_alufn;
  alu_compare_13 compareUnit (
    .z(M_compareUnit_z),
    .v(M_compareUnit_v),
    .n(M_compareUnit_n),
    .alufn(M_compareUnit_alufn),
    .out(M_compareUnit_out)
  );
  
  wire [16-1:0] M_multiplierUnit_out;
  reg [16-1:0] M_multiplierUnit_a;
  reg [16-1:0] M_multiplierUnit_b;
  mx16x16_14 multiplierUnit (
    .a(M_multiplierUnit_a),
    .b(M_multiplierUnit_b),
    .out(M_multiplierUnit_out)
  );
  
  always @* begin
    M_adderUnit_subtract = alufn[0+0-:1];
    M_adderUnit_a = a;
    M_adderUnit_b = b;
    z = M_adderUnit_z;
    v = M_adderUnit_v;
    n = M_adderUnit_n;
    M_compareUnit_alufn = alufn[0+3-:4];
    M_compareUnit_z = M_adderUnit_z;
    M_compareUnit_v = M_adderUnit_v;
    M_compareUnit_n = M_adderUnit_n;
    M_booleanUnit_alufn = alufn[0+3-:4];
    M_booleanUnit_a = a;
    M_booleanUnit_b = b;
    M_shifterUnit_alufn = alufn[0+3-:4];
    M_shifterUnit_a = a;
    M_shifterUnit_b = b[0+3-:4];
    M_multiplierUnit_a = a;
    M_multiplierUnit_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[1+0-:1]) begin
          out = M_multiplierUnit_out;
        end else begin
          out = M_adderUnit_out;
        end
      end
      2'h1: begin
        out = M_booleanUnit_out;
      end
      2'h2: begin
        out = M_shifterUnit_out;
      end
      2'h3: begin
        out = M_compareUnit_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
