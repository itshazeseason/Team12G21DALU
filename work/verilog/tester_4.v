/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_4 (
    input clk,
    input rst,
    input trigA,
    input trigB,
    input trigSel,
    input trigExe,
    input trigTest,
    input [15:0] dipsw,
    output reg [15:0] led,
    output reg [5:0] led_alufn,
    output reg [6:0] seg,
    output reg [3:0] sel,
    output reg [15:0] alu_a,
    output reg [15:0] alu_b,
    output reg [5:0] alu_fn,
    input [15:0] alu_result,
    input [15:0] alu_check
  );
  
  
  
  reg [5:0] alufn;
  
  reg tick;
  
  reg [37:0] vec;
  
  reg result;
  
  localparam ALUFN = 114'h37d739e592386051271a59e602040;
  
  wire [7-1:0] M_disp_seg;
  wire [4-1:0] M_disp_sel;
  reg [5-1:0] M_disp_dispmode;
  reg [16-1:0] M_disp_data16;
  disp7seg_top_7 disp (
    .clk(clk),
    .rst(rst),
    .dispmode(M_disp_dispmode),
    .data16(M_disp_data16),
    .seg(M_disp_seg),
    .sel(M_disp_sel)
  );
  
  wire [38-1:0] M_ttbl_vec;
  reg [8-1:0] M_ttbl_step;
  testtbl_8 ttbl (
    .step(M_ttbl_step),
    .vec(M_ttbl_vec)
  );
  
  reg [15:0] M_dff_a_d, M_dff_a_q = 1'h0;
  
  reg [15:0] M_dff_b_d, M_dff_b_q = 1'h0;
  
  reg [4:0] M_dff_alumode_d, M_dff_alumode_q = 1'h0;
  
  reg [5:0] M_dff_testfn_d, M_dff_testfn_q = 1'h0;
  
  reg M_dff_run_d, M_dff_run_q = 1'h0;
  
  wire [1-1:0] M_tickctr_value;
  reg [1-1:0] M_tickctr_rst;
  counter_9 tickctr (
    .clk(clk),
    .rst(M_tickctr_rst),
    .value(M_tickctr_value)
  );
  
  wire [1-1:0] M_edge_tick_out;
  reg [1-1:0] M_edge_tick_in;
  edge_detector_3 edge_tick (
    .clk(clk),
    .in(M_edge_tick_in),
    .out(M_edge_tick_out)
  );
  
  reg [7:0] M_stepctr_d, M_stepctr_q = 1'h0;
  
  
  localparam SELA_ledSel = 2'd0;
  localparam SELB_ledSel = 2'd1;
  localparam SELALU_ledSel = 2'd2;
  
  reg [1:0] M_ledSel_d, M_ledSel_q = SELA_ledSel;
  
  
  localparam SELA_dataSel = 2'd0;
  localparam SELB_dataSel = 2'd1;
  localparam SELALU_dataSel = 2'd2;
  localparam SELTEST_dataSel = 2'd3;
  
  reg [1:0] M_dataSel_d, M_dataSel_q = SELA_dataSel;
  
  
  localparam RDY_dispSel = 3'd0;
  localparam DATA_dispSel = 3'd1;
  localparam PASS_dispSel = 3'd2;
  localparam FAIL_dispSel = 3'd3;
  localparam ALUMODE_dispSel = 3'd4;
  localparam ERR_dispSel = 3'd5;
  
  reg [2:0] M_dispSel_d, M_dispSel_q = RDY_dispSel;
  
  
  localparam RDY_state = 3'd0;
  localparam LDA_state = 3'd1;
  localparam LDB_state = 3'd2;
  localparam FNSEL_state = 3'd3;
  localparam EXE_state = 3'd4;
  localparam RUN_state = 3'd5;
  localparam CHECK_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = RDY_state;
  
  always @* begin
    M_dataSel_d = M_dataSel_q;
    M_ledSel_d = M_ledSel_q;
    M_state_d = M_state_q;
    M_dispSel_d = M_dispSel_q;
    M_dff_b_d = M_dff_b_q;
    M_dff_testfn_d = M_dff_testfn_q;
    M_dff_a_d = M_dff_a_q;
    M_dff_run_d = M_dff_run_q;
    M_stepctr_d = M_stepctr_q;
    M_dff_alumode_d = M_dff_alumode_q;
    
    vec = M_ttbl_vec;
    result = (~|(alu_check ^ alu_result));
    alufn = 6'h00;
    
    case (M_dataSel_q)
      SELTEST_dataSel: begin
        alufn = M_dff_testfn_q;
      end
      default: begin
        alufn = ALUFN[(M_dff_alumode_q)*6+5-:6];
      end
    endcase
    seg = M_disp_seg;
    sel = M_disp_sel;
    led = 16'h0000;
    
    case (M_ledSel_q)
      SELA_ledSel: begin
        led = M_dff_a_q;
      end
      SELB_ledSel: begin
        led = M_dff_b_q;
      end
      SELALU_ledSel: begin
        led = alu_result;
      end
    endcase
    led_alufn = alufn;
    M_disp_data16 = 16'h0000;
    
    case (M_dataSel_q)
      SELA_dataSel: begin
        M_disp_data16 = M_dff_a_q;
      end
      SELB_dataSel: begin
        M_disp_data16 = M_dff_b_q;
      end
      SELALU_dataSel: begin
        M_disp_data16 = alu_result;
      end
      SELTEST_dataSel: begin
        M_disp_data16 = M_stepctr_q;
      end
    endcase
    M_disp_dispmode = 5'h00;
    
    case (M_dispSel_q)
      RDY_dispSel: begin
        M_disp_dispmode = 5'h1e;
      end
      DATA_dispSel: begin
        M_disp_dispmode = 5'h1f;
      end
      PASS_dispSel: begin
        M_disp_dispmode = 5'h1c;
      end
      FAIL_dispSel: begin
        M_disp_dispmode = 5'h1d;
      end
      ALUMODE_dispSel: begin
        M_disp_dispmode = M_dff_alumode_q;
      end
      ERR_dispSel: begin
        M_disp_dispmode = 5'h1b;
      end
    endcase
    alu_a = M_dff_a_q;
    alu_b = M_dff_b_q;
    alu_fn = alufn;
    M_tickctr_rst = ~M_dff_run_q;
    M_edge_tick_in = M_tickctr_value;
    tick = M_edge_tick_out;
    M_ttbl_step = M_stepctr_q;
    M_dff_a_d = M_dff_a_q;
    M_dff_b_d = M_dff_b_q;
    M_dff_alumode_d = M_dff_alumode_q;
    M_dff_testfn_d = M_dff_testfn_q;
    M_dff_run_d = M_dff_run_q;
    M_stepctr_d = M_stepctr_q;
    M_ledSel_d = M_ledSel_q;
    M_dataSel_d = M_dataSel_q;
    M_dispSel_d = M_dispSel_q;
    M_state_d = M_state_q;
    if (M_dff_run_q) begin
      if (tick) begin
        
        case (M_state_q)
          RUN_state: begin
            if (vec[32+5-:6] == 6'h3f) begin
              M_dff_run_d = 1'h0;
              M_state_d = RDY_state;
              M_dispSel_d = PASS_dispSel;
            end else begin
              M_state_d = CHECK_state;
              M_dff_a_d = vec[16+15-:16];
              M_dff_b_d = vec[0+15-:16];
              M_dff_testfn_d = vec[32+5-:6];
            end
          end
          CHECK_state: begin
            if (result) begin
              M_stepctr_d = M_stepctr_q + 1'h1;
              M_state_d = RUN_state;
            end else begin
              M_dff_run_d = 1'h0;
              M_state_d = RDY_state;
            end
          end
          default: begin
            M_dff_run_d = 1'h0;
            M_state_d = RDY_state;
            M_ledSel_d = SELA_ledSel;
            M_dataSel_d = SELA_dataSel;
            M_dispSel_d = ERR_dispSel;
          end
        endcase
      end
    end else begin
      if (trigA) begin
        if (M_state_q == LDA_state) begin
          M_dff_a_d = dipsw;
          M_ledSel_d = SELA_ledSel;
          M_dataSel_d = SELA_dataSel;
          M_dispSel_d = DATA_dispSel;
        end else begin
          M_state_d = LDA_state;
          M_ledSel_d = SELA_ledSel;
          M_dataSel_d = SELA_dataSel;
          M_dispSel_d = DATA_dispSel;
        end
      end else begin
        if (trigB) begin
          if (M_state_q == LDB_state) begin
            M_dff_b_d = dipsw;
            M_ledSel_d = SELB_ledSel;
            M_dataSel_d = SELB_dataSel;
            M_dispSel_d = DATA_dispSel;
          end else begin
            M_state_d = LDB_state;
            M_ledSel_d = SELB_ledSel;
            M_dataSel_d = SELB_dataSel;
            M_dispSel_d = DATA_dispSel;
          end
        end else begin
          if (trigSel) begin
            if (M_state_q == FNSEL_state) begin
              if (M_dff_alumode_q == 5'h12) begin
                M_dff_alumode_d = 1'h0;
              end else begin
                M_dff_alumode_d = M_dff_alumode_q + 1'h1;
              end
              M_dispSel_d = ALUMODE_dispSel;
            end else begin
              M_state_d = FNSEL_state;
              M_dispSel_d = ALUMODE_dispSel;
            end
          end else begin
            if (trigExe) begin
              if (M_state_q == EXE_state) begin
                M_dff_a_d = alu_result;
                M_ledSel_d = SELALU_ledSel;
                M_dataSel_d = SELALU_dataSel;
                M_dispSel_d = DATA_dispSel;
              end else begin
                M_state_d = EXE_state;
                M_ledSel_d = SELALU_ledSel;
                M_dataSel_d = SELALU_dataSel;
                M_dispSel_d = DATA_dispSel;
              end
            end else begin
              if (trigTest) begin
                M_state_d = RUN_state;
                M_dff_run_d = 1'h1;
                M_ledSel_d = SELALU_ledSel;
                M_dataSel_d = SELTEST_dataSel;
                M_dispSel_d = DATA_dispSel;
                M_stepctr_d = 1'h1;
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dff_testfn_q <= 1'h0;
    end else begin
      M_dff_testfn_q <= M_dff_testfn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ledSel_q <= 1'h0;
    end else begin
      M_ledSel_q <= M_ledSel_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dff_run_q <= 1'h0;
    end else begin
      M_dff_run_q <= M_dff_run_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dff_b_q <= 1'h0;
    end else begin
      M_dff_b_q <= M_dff_b_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dff_alumode_q <= 1'h0;
    end else begin
      M_dff_alumode_q <= M_dff_alumode_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dff_a_q <= 1'h0;
    end else begin
      M_dff_a_q <= M_dff_a_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stepctr_q <= 1'h0;
    end else begin
      M_stepctr_q <= M_stepctr_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dispSel_q <= 1'h0;
    end else begin
      M_dispSel_q <= M_dispSel_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dataSel_q <= 1'h0;
    end else begin
      M_dataSel_q <= M_dataSel_d;
    end
  end
  
endmodule
