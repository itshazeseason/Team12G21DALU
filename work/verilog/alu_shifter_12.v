/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shifter_12 (
    input [15:0] a,
    input [3:0] b,
    input [3:0] alufn,
    output reg [15:0] out
  );
  
  
  
  integer i;
  
  reg [15:0] z;
  
  reg [3:0] rb;
  
  reg [15:0] r8;
  reg [15:0] r4;
  reg [15:0] r2;
  
  reg [15:0] m8;
  reg [15:0] m4;
  reg [15:0] m2;
  
  reg [15:0] r;
  
  reg [15:0] mask;
  
  always @* begin
    rb = b;
    
    case (alufn)
      4'h0: begin
        rb = b;
      end
      4'h1: begin
        rb = -b;
      end
      4'h3: begin
        rb = -b;
      end
      4'h4: begin
        rb = b;
      end
      4'h5: begin
        rb = -b;
      end
      default: begin
        rb = b;
      end
    endcase
    mask = 16'h0000;
    r = 16'h0000;
    if (rb[3+0-:1]) begin
      r8 = {a[0+7-:8], a[8+7-:8]};
      m8 = 16'h00ff;
    end else begin
      r8 = a;
      m8 = 16'h0000;
    end
    if (rb[2+0-:1]) begin
      r4 = {r8[0+11-:12], r8[12+3-:4]};
      m4 = {m8[0+11-:12], 4'hf};
    end else begin
      r4 = r8;
      m4 = m8;
    end
    if (rb[1+0-:1]) begin
      r2 = {r4[0+13-:14], r4[14+1-:2]};
      m2 = {m4[0+13-:14], 2'h3};
    end else begin
      r2 = r4;
      m2 = m4;
    end
    if (rb[0+0-:1]) begin
      r = {r2[0+14-:15], r2[15+0-:1]};
      mask = {m2[0+14-:15], 1'h1};
    end else begin
      r = r2;
      mask = m2;
    end
    z = a;
    
    case (alufn)
      4'h0: begin
        z = r & ~mask;
      end
      4'h1: begin
        z = r & mask;
      end
      4'h3: begin
        z = ({5'h10{a[15+0-:1]}} & ~mask) | (r & mask);
      end
      4'h4: begin
        z = r;
      end
      4'h5: begin
        z = r;
      end
      4'h7: begin
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          z[(i)*1+0-:1] = a[(4'hf - i)*1+0-:1];
        end
      end
      default: begin
        z = a;
      end
    endcase
    out = z;
  end
endmodule
