/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [(3'h5+0)-1:0] M_button_out;
  reg [(3'h5+0)-1:0] M_button_in;
  
  genvar GEN_button0;
  generate
  for (GEN_button0=0;GEN_button0<3'h5;GEN_button0=GEN_button0+1) begin: button_gen_0
    button_conditioner_2 button (
      .clk(clk),
      .in(M_button_in[GEN_button0*(1)+(1)-1-:(1)]),
      .out(M_button_out[GEN_button0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_button_edge_out;
  reg [(3'h5+0)-1:0] M_button_edge_in;
  
  genvar GEN_button_edge0;
  generate
  for (GEN_button_edge0=0;GEN_button_edge0<3'h5;GEN_button_edge0=GEN_button_edge0+1) begin: button_edge_gen_0
    edge_detector_3 button_edge (
      .clk(clk),
      .in(M_button_edge_in[GEN_button_edge0*(1)+(1)-1-:(1)]),
      .out(M_button_edge_out[GEN_button_edge0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_tester_led;
  wire [6-1:0] M_tester_led_alufn;
  wire [7-1:0] M_tester_seg;
  wire [4-1:0] M_tester_sel;
  wire [16-1:0] M_tester_alu_a;
  wire [16-1:0] M_tester_alu_b;
  wire [6-1:0] M_tester_alu_fn;
  reg [1-1:0] M_tester_trigA;
  reg [1-1:0] M_tester_trigB;
  reg [1-1:0] M_tester_trigSel;
  reg [1-1:0] M_tester_trigExe;
  reg [1-1:0] M_tester_trigTest;
  reg [16-1:0] M_tester_dipsw;
  reg [16-1:0] M_tester_alu_result;
  reg [16-1:0] M_tester_alu_check;
  tester_4 tester (
    .clk(clk),
    .rst(rst),
    .trigA(M_tester_trigA),
    .trigB(M_tester_trigB),
    .trigSel(M_tester_trigSel),
    .trigExe(M_tester_trigExe),
    .trigTest(M_tester_trigTest),
    .dipsw(M_tester_dipsw),
    .alu_result(M_tester_alu_result),
    .alu_check(M_tester_alu_check),
    .led(M_tester_led),
    .led_alufn(M_tester_led_alufn),
    .seg(M_tester_seg),
    .sel(M_tester_sel),
    .alu_a(M_tester_alu_a),
    .alu_b(M_tester_alu_b),
    .alu_fn(M_tester_alu_fn)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_16_5 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    usb_tx = usb_rx;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_button_in = io_button;
    M_button_edge_in = M_button_out;
    M_tester_trigA = M_button_edge_out[3+0-:1];
    M_tester_trigB = M_button_edge_out[4+0-:1];
    M_tester_trigExe = M_button_edge_out[1+0-:1];
    M_tester_trigSel = M_button_edge_out[0+0-:1];
    M_tester_trigTest = M_button_edge_out[2+0-:1];
    M_tester_dipsw = {io_dip[8+7-:8], io_dip[0+7-:8]};
    io_seg[0+6-:7] = ~M_tester_seg;
    io_sel = ~M_tester_sel;
    M_alu_a = M_tester_alu_a;
    M_alu_b = M_tester_alu_b;
    M_alu_alufn = M_tester_alu_fn;
    M_tester_alu_result = M_alu_out;
    M_tester_alu_check = M_alu_out;
    io_led[16+0+5-:6] = M_tester_led_alufn;
    io_led[8+7-:8] = M_tester_led[8+7-:8];
    io_led[0+7-:8] = M_tester_led[0+7-:8];
    io_seg[7+0-:1] = ~io_dip[16+7+0-:1];
    if (io_dip[16+7+0-:1]) begin
      M_tester_alu_result[15+0-:1] = 1'h1;
    end
  end
endmodule
